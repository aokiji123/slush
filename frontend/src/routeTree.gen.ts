/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as CodeAccessRouteImport } from './routes/code-access'
import { Route as ChangePasswordRouteImport } from './routes/change-password'
import { Route as SlugRouteRouteImport } from './routes/$slug/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SlugIndexRouteImport } from './routes/$slug/index'
import { Route as SlugCommunityRouteRouteImport } from './routes/$slug/community/route'
import { Route as SlugCharacteristicsRouteRouteImport } from './routes/$slug/characteristics/route'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const CodeAccessRoute = CodeAccessRouteImport.update({
  id: '/code-access',
  path: '/code-access',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangePasswordRoute = ChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugRouteRoute = SlugRouteRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugIndexRoute = SlugIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SlugRouteRoute,
} as any)
const SlugCommunityRouteRoute = SlugCommunityRouteRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => SlugRouteRoute,
} as any)
const SlugCharacteristicsRouteRoute =
  SlugCharacteristicsRouteRouteImport.update({
    id: '/characteristics',
    path: '/characteristics',
    getParentRoute: () => SlugRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRouteRouteWithChildren
  '/change-password': typeof ChangePasswordRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRoute
  '/$slug/': typeof SlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/change-password': typeof ChangePasswordRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRoute
  '/$slug': typeof SlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$slug': typeof SlugRouteRouteWithChildren
  '/change-password': typeof ChangePasswordRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/sign-up': typeof SignUpRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRoute
  '/$slug/': typeof SlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$slug'
    | '/change-password'
    | '/code-access'
    | '/forgot-password'
    | '/login'
    | '/sign-up'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/change-password'
    | '/code-access'
    | '/forgot-password'
    | '/login'
    | '/sign-up'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug'
  id:
    | '__root__'
    | '/'
    | '/$slug'
    | '/change-password'
    | '/code-access'
    | '/forgot-password'
    | '/login'
    | '/sign-up'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SlugRouteRoute: typeof SlugRouteRouteWithChildren
  ChangePasswordRoute: typeof ChangePasswordRoute
  CodeAccessRoute: typeof CodeAccessRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  SignUpRoute: typeof SignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/code-access': {
      id: '/code-access'
      path: '/code-access'
      fullPath: '/code-access'
      preLoaderRoute: typeof CodeAccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/change-password': {
      id: '/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof ChangePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$slug': {
      id: '/$slug'
      path: '/$slug'
      fullPath: '/$slug'
      preLoaderRoute: typeof SlugRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$slug/': {
      id: '/$slug/'
      path: '/'
      fullPath: '/$slug/'
      preLoaderRoute: typeof SlugIndexRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/$slug/community': {
      id: '/$slug/community'
      path: '/community'
      fullPath: '/$slug/community'
      preLoaderRoute: typeof SlugCommunityRouteRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/$slug/characteristics': {
      id: '/$slug/characteristics'
      path: '/characteristics'
      fullPath: '/$slug/characteristics'
      preLoaderRoute: typeof SlugCharacteristicsRouteRouteImport
      parentRoute: typeof SlugRouteRoute
    }
  }
}

interface SlugRouteRouteChildren {
  SlugCharacteristicsRouteRoute: typeof SlugCharacteristicsRouteRoute
  SlugCommunityRouteRoute: typeof SlugCommunityRouteRoute
  SlugIndexRoute: typeof SlugIndexRoute
}

const SlugRouteRouteChildren: SlugRouteRouteChildren = {
  SlugCharacteristicsRouteRoute: SlugCharacteristicsRouteRoute,
  SlugCommunityRouteRoute: SlugCommunityRouteRoute,
  SlugIndexRoute: SlugIndexRoute,
}

const SlugRouteRouteWithChildren = SlugRouteRoute._addFileChildren(
  SlugRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SlugRouteRoute: SlugRouteRouteWithChildren,
  ChangePasswordRoute: ChangePasswordRoute,
  CodeAccessRoute: CodeAccessRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  SignUpRoute: SignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
