/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WishlistRouteImport } from './routes/wishlist'
import { Route as TermsOfUseRouteImport } from './routes/terms-of-use'
import { Route as StoreRefundPolicyRouteImport } from './routes/store-refund-policy'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as NewRouteImport } from './routes/new'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LibraryRouteImport } from './routes/library'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as CodeAccessRouteImport } from './routes/code-access'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as ChangePasswordRouteImport } from './routes/change-password'
import { Route as CatalogRouteImport } from './routes/catalog'
import { Route as CartRouteImport } from './routes/cart'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as CommunityRouteRouteImport } from './routes/community/route'
import { Route as SlugRouteRouteImport } from './routes/$slug/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SlugIndexRouteImport } from './routes/$slug/index'
import { Route as SettingsWalletRouteImport } from './routes/settings/wallet'
import { Route as SettingsPasswordRouteImport } from './routes/settings/password'
import { Route as SettingsNotificationsRouteImport } from './routes/settings/notifications'
import { Route as SettingsDeleteAccountRouteImport } from './routes/settings/delete-account'
import { Route as ProfileNicknameRouteRouteImport } from './routes/profile/$nickname/route'
import { Route as FriendsAllRouteRouteImport } from './routes/friends/all/route'
import { Route as SlugDlcRouteRouteImport } from './routes/$slug/dlc/route'
import { Route as SlugCommunityRouteRouteImport } from './routes/$slug/community/route'
import { Route as SlugCharacteristicsRouteRouteImport } from './routes/$slug/characteristics/route'
import { Route as ProfileNicknameIndexRouteImport } from './routes/profile/$nickname/index'
import { Route as ProfileNicknameWishlistRouteRouteImport } from './routes/profile/$nickname/wishlist/route'
import { Route as ProfileNicknameVideosRouteRouteImport } from './routes/profile/$nickname/videos/route'
import { Route as ProfileNicknameScreenshotsRouteRouteImport } from './routes/profile/$nickname/screenshots/route'
import { Route as ProfileNicknameReviewsRouteRouteImport } from './routes/profile/$nickname/reviews/route'
import { Route as ProfileNicknameGuidesRouteRouteImport } from './routes/profile/$nickname/guides/route'
import { Route as ProfileNicknameGamesRouteRouteImport } from './routes/profile/$nickname/games/route'
import { Route as ProfileNicknameFriendsRouteRouteImport } from './routes/profile/$nickname/friends/route'
import { Route as ProfileNicknameDiscussionsRouteRouteImport } from './routes/profile/$nickname/discussions/route'
import { Route as ProfileNicknameBadgesRouteRouteImport } from './routes/profile/$nickname/badges/route'
import { Route as CommunityPostIdRouteRouteImport } from './routes/community/post/$id/route'
import { Route as SlugCommunityCreatePostRouteRouteImport } from './routes/$slug/community/createPost/route'
import { Route as SlugCommunityPostIdRouteRouteImport } from './routes/$slug/community/post/$id/route'
import { Route as SlugCommunityCurrentPostIdRouteRouteImport } from './routes/$slug/community/currentPost/$id/route'

const WishlistRoute = WishlistRouteImport.update({
  id: '/wishlist',
  path: '/wishlist',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsOfUseRoute = TermsOfUseRouteImport.update({
  id: '/terms-of-use',
  path: '/terms-of-use',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreRefundPolicyRoute = StoreRefundPolicyRouteImport.update({
  id: '/store-refund-policy',
  path: '/store-refund-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const NewRoute = NewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const CodeAccessRoute = CodeAccessRouteImport.update({
  id: '/code-access',
  path: '/code-access',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ChangePasswordRoute = ChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => rootRouteImport,
} as any)
const CatalogRoute = CatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRouteRoute = CommunityRouteRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugRouteRoute = SlugRouteRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SlugIndexRoute = SlugIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SlugRouteRoute,
} as any)
const SettingsWalletRoute = SettingsWalletRouteImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsPasswordRoute = SettingsPasswordRouteImport.update({
  id: '/password',
  path: '/password',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsNotificationsRoute = SettingsNotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsDeleteAccountRoute = SettingsDeleteAccountRouteImport.update({
  id: '/delete-account',
  path: '/delete-account',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const ProfileNicknameRouteRoute = ProfileNicknameRouteRouteImport.update({
  id: '/profile/$nickname',
  path: '/profile/$nickname',
  getParentRoute: () => rootRouteImport,
} as any)
const FriendsAllRouteRoute = FriendsAllRouteRouteImport.update({
  id: '/friends/all',
  path: '/friends/all',
  getParentRoute: () => rootRouteImport,
} as any)
const SlugDlcRouteRoute = SlugDlcRouteRouteImport.update({
  id: '/dlc',
  path: '/dlc',
  getParentRoute: () => SlugRouteRoute,
} as any)
const SlugCommunityRouteRoute = SlugCommunityRouteRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => SlugRouteRoute,
} as any)
const SlugCharacteristicsRouteRoute =
  SlugCharacteristicsRouteRouteImport.update({
    id: '/characteristics',
    path: '/characteristics',
    getParentRoute: () => SlugRouteRoute,
  } as any)
const ProfileNicknameIndexRoute = ProfileNicknameIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileNicknameRouteRoute,
} as any)
const ProfileNicknameWishlistRouteRoute =
  ProfileNicknameWishlistRouteRouteImport.update({
    id: '/wishlist',
    path: '/wishlist',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameVideosRouteRoute =
  ProfileNicknameVideosRouteRouteImport.update({
    id: '/videos',
    path: '/videos',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameScreenshotsRouteRoute =
  ProfileNicknameScreenshotsRouteRouteImport.update({
    id: '/screenshots',
    path: '/screenshots',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameReviewsRouteRoute =
  ProfileNicknameReviewsRouteRouteImport.update({
    id: '/reviews',
    path: '/reviews',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameGuidesRouteRoute =
  ProfileNicknameGuidesRouteRouteImport.update({
    id: '/guides',
    path: '/guides',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameGamesRouteRoute =
  ProfileNicknameGamesRouteRouteImport.update({
    id: '/games',
    path: '/games',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameFriendsRouteRoute =
  ProfileNicknameFriendsRouteRouteImport.update({
    id: '/friends',
    path: '/friends',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameDiscussionsRouteRoute =
  ProfileNicknameDiscussionsRouteRouteImport.update({
    id: '/discussions',
    path: '/discussions',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const ProfileNicknameBadgesRouteRoute =
  ProfileNicknameBadgesRouteRouteImport.update({
    id: '/badges',
    path: '/badges',
    getParentRoute: () => ProfileNicknameRouteRoute,
  } as any)
const CommunityPostIdRouteRoute = CommunityPostIdRouteRouteImport.update({
  id: '/post/$id',
  path: '/post/$id',
  getParentRoute: () => CommunityRouteRoute,
} as any)
const SlugCommunityCreatePostRouteRoute =
  SlugCommunityCreatePostRouteRouteImport.update({
    id: '/createPost',
    path: '/createPost',
    getParentRoute: () => SlugCommunityRouteRoute,
  } as any)
const SlugCommunityPostIdRouteRoute =
  SlugCommunityPostIdRouteRouteImport.update({
    id: '/post/$id',
    path: '/post/$id',
    getParentRoute: () => SlugCommunityRouteRoute,
  } as any)
const SlugCommunityCurrentPostIdRouteRoute =
  SlugCommunityCurrentPostIdRouteRouteImport.update({
    id: '/currentPost/$id',
    path: '/currentPost/$id',
    getParentRoute: () => SlugCommunityRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRouteRouteWithChildren
  '/community': typeof CommunityRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/change-password': typeof ChangePasswordRoute
  '/chat': typeof ChatRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sign-up': typeof SignUpRoute
  '/store-refund-policy': typeof StoreRefundPolicyRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/wishlist': typeof WishlistRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRouteWithChildren
  '/$slug/dlc': typeof SlugDlcRouteRoute
  '/friends/all': typeof FriendsAllRouteRoute
  '/profile/$nickname': typeof ProfileNicknameRouteRouteWithChildren
  '/settings/delete-account': typeof SettingsDeleteAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/password': typeof SettingsPasswordRoute
  '/settings/wallet': typeof SettingsWalletRoute
  '/$slug/': typeof SlugIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/$slug/community/createPost': typeof SlugCommunityCreatePostRouteRoute
  '/community/post/$id': typeof CommunityPostIdRouteRoute
  '/profile/$nickname/badges': typeof ProfileNicknameBadgesRouteRoute
  '/profile/$nickname/discussions': typeof ProfileNicknameDiscussionsRouteRoute
  '/profile/$nickname/friends': typeof ProfileNicknameFriendsRouteRoute
  '/profile/$nickname/games': typeof ProfileNicknameGamesRouteRoute
  '/profile/$nickname/guides': typeof ProfileNicknameGuidesRouteRoute
  '/profile/$nickname/reviews': typeof ProfileNicknameReviewsRouteRoute
  '/profile/$nickname/screenshots': typeof ProfileNicknameScreenshotsRouteRoute
  '/profile/$nickname/videos': typeof ProfileNicknameVideosRouteRoute
  '/profile/$nickname/wishlist': typeof ProfileNicknameWishlistRouteRoute
  '/profile/$nickname/': typeof ProfileNicknameIndexRoute
  '/$slug/community/currentPost/$id': typeof SlugCommunityCurrentPostIdRouteRoute
  '/$slug/community/post/$id': typeof SlugCommunityPostIdRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/community': typeof CommunityRouteRouteWithChildren
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/change-password': typeof ChangePasswordRoute
  '/chat': typeof ChatRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sign-up': typeof SignUpRoute
  '/store-refund-policy': typeof StoreRefundPolicyRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/wishlist': typeof WishlistRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRouteWithChildren
  '/$slug/dlc': typeof SlugDlcRouteRoute
  '/friends/all': typeof FriendsAllRouteRoute
  '/settings/delete-account': typeof SettingsDeleteAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/password': typeof SettingsPasswordRoute
  '/settings/wallet': typeof SettingsWalletRoute
  '/$slug': typeof SlugIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/$slug/community/createPost': typeof SlugCommunityCreatePostRouteRoute
  '/community/post/$id': typeof CommunityPostIdRouteRoute
  '/profile/$nickname/badges': typeof ProfileNicknameBadgesRouteRoute
  '/profile/$nickname/discussions': typeof ProfileNicknameDiscussionsRouteRoute
  '/profile/$nickname/friends': typeof ProfileNicknameFriendsRouteRoute
  '/profile/$nickname/games': typeof ProfileNicknameGamesRouteRoute
  '/profile/$nickname/guides': typeof ProfileNicknameGuidesRouteRoute
  '/profile/$nickname/reviews': typeof ProfileNicknameReviewsRouteRoute
  '/profile/$nickname/screenshots': typeof ProfileNicknameScreenshotsRouteRoute
  '/profile/$nickname/videos': typeof ProfileNicknameVideosRouteRoute
  '/profile/$nickname/wishlist': typeof ProfileNicknameWishlistRouteRoute
  '/profile/$nickname': typeof ProfileNicknameIndexRoute
  '/$slug/community/currentPost/$id': typeof SlugCommunityCurrentPostIdRouteRoute
  '/$slug/community/post/$id': typeof SlugCommunityPostIdRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$slug': typeof SlugRouteRouteWithChildren
  '/community': typeof CommunityRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/change-password': typeof ChangePasswordRoute
  '/chat': typeof ChatRoute
  '/code-access': typeof CodeAccessRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/new': typeof NewRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/sign-up': typeof SignUpRoute
  '/store-refund-policy': typeof StoreRefundPolicyRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/wishlist': typeof WishlistRoute
  '/$slug/characteristics': typeof SlugCharacteristicsRouteRoute
  '/$slug/community': typeof SlugCommunityRouteRouteWithChildren
  '/$slug/dlc': typeof SlugDlcRouteRoute
  '/friends/all': typeof FriendsAllRouteRoute
  '/profile/$nickname': typeof ProfileNicknameRouteRouteWithChildren
  '/settings/delete-account': typeof SettingsDeleteAccountRoute
  '/settings/notifications': typeof SettingsNotificationsRoute
  '/settings/password': typeof SettingsPasswordRoute
  '/settings/wallet': typeof SettingsWalletRoute
  '/$slug/': typeof SlugIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/$slug/community/createPost': typeof SlugCommunityCreatePostRouteRoute
  '/community/post/$id': typeof CommunityPostIdRouteRoute
  '/profile/$nickname/badges': typeof ProfileNicknameBadgesRouteRoute
  '/profile/$nickname/discussions': typeof ProfileNicknameDiscussionsRouteRoute
  '/profile/$nickname/friends': typeof ProfileNicknameFriendsRouteRoute
  '/profile/$nickname/games': typeof ProfileNicknameGamesRouteRoute
  '/profile/$nickname/guides': typeof ProfileNicknameGuidesRouteRoute
  '/profile/$nickname/reviews': typeof ProfileNicknameReviewsRouteRoute
  '/profile/$nickname/screenshots': typeof ProfileNicknameScreenshotsRouteRoute
  '/profile/$nickname/videos': typeof ProfileNicknameVideosRouteRoute
  '/profile/$nickname/wishlist': typeof ProfileNicknameWishlistRouteRoute
  '/profile/$nickname/': typeof ProfileNicknameIndexRoute
  '/$slug/community/currentPost/$id': typeof SlugCommunityCurrentPostIdRouteRoute
  '/$slug/community/post/$id': typeof SlugCommunityPostIdRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$slug'
    | '/community'
    | '/settings'
    | '/cart'
    | '/catalog'
    | '/change-password'
    | '/chat'
    | '/code-access'
    | '/forgot-password'
    | '/library'
    | '/login'
    | '/new'
    | '/privacy-policy'
    | '/sign-up'
    | '/store-refund-policy'
    | '/terms-of-use'
    | '/wishlist'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug/dlc'
    | '/friends/all'
    | '/profile/$nickname'
    | '/settings/delete-account'
    | '/settings/notifications'
    | '/settings/password'
    | '/settings/wallet'
    | '/$slug/'
    | '/settings/'
    | '/$slug/community/createPost'
    | '/community/post/$id'
    | '/profile/$nickname/badges'
    | '/profile/$nickname/discussions'
    | '/profile/$nickname/friends'
    | '/profile/$nickname/games'
    | '/profile/$nickname/guides'
    | '/profile/$nickname/reviews'
    | '/profile/$nickname/screenshots'
    | '/profile/$nickname/videos'
    | '/profile/$nickname/wishlist'
    | '/profile/$nickname/'
    | '/$slug/community/currentPost/$id'
    | '/$slug/community/post/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/community'
    | '/cart'
    | '/catalog'
    | '/change-password'
    | '/chat'
    | '/code-access'
    | '/forgot-password'
    | '/library'
    | '/login'
    | '/new'
    | '/privacy-policy'
    | '/sign-up'
    | '/store-refund-policy'
    | '/terms-of-use'
    | '/wishlist'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug/dlc'
    | '/friends/all'
    | '/settings/delete-account'
    | '/settings/notifications'
    | '/settings/password'
    | '/settings/wallet'
    | '/$slug'
    | '/settings'
    | '/$slug/community/createPost'
    | '/community/post/$id'
    | '/profile/$nickname/badges'
    | '/profile/$nickname/discussions'
    | '/profile/$nickname/friends'
    | '/profile/$nickname/games'
    | '/profile/$nickname/guides'
    | '/profile/$nickname/reviews'
    | '/profile/$nickname/screenshots'
    | '/profile/$nickname/videos'
    | '/profile/$nickname/wishlist'
    | '/profile/$nickname'
    | '/$slug/community/currentPost/$id'
    | '/$slug/community/post/$id'
  id:
    | '__root__'
    | '/'
    | '/$slug'
    | '/community'
    | '/settings'
    | '/cart'
    | '/catalog'
    | '/change-password'
    | '/chat'
    | '/code-access'
    | '/forgot-password'
    | '/library'
    | '/login'
    | '/new'
    | '/privacy-policy'
    | '/sign-up'
    | '/store-refund-policy'
    | '/terms-of-use'
    | '/wishlist'
    | '/$slug/characteristics'
    | '/$slug/community'
    | '/$slug/dlc'
    | '/friends/all'
    | '/profile/$nickname'
    | '/settings/delete-account'
    | '/settings/notifications'
    | '/settings/password'
    | '/settings/wallet'
    | '/$slug/'
    | '/settings/'
    | '/$slug/community/createPost'
    | '/community/post/$id'
    | '/profile/$nickname/badges'
    | '/profile/$nickname/discussions'
    | '/profile/$nickname/friends'
    | '/profile/$nickname/games'
    | '/profile/$nickname/guides'
    | '/profile/$nickname/reviews'
    | '/profile/$nickname/screenshots'
    | '/profile/$nickname/videos'
    | '/profile/$nickname/wishlist'
    | '/profile/$nickname/'
    | '/$slug/community/currentPost/$id'
    | '/$slug/community/post/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SlugRouteRoute: typeof SlugRouteRouteWithChildren
  CommunityRouteRoute: typeof CommunityRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  CartRoute: typeof CartRoute
  CatalogRoute: typeof CatalogRoute
  ChangePasswordRoute: typeof ChangePasswordRoute
  ChatRoute: typeof ChatRoute
  CodeAccessRoute: typeof CodeAccessRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LibraryRoute: typeof LibraryRoute
  LoginRoute: typeof LoginRoute
  NewRoute: typeof NewRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  SignUpRoute: typeof SignUpRoute
  StoreRefundPolicyRoute: typeof StoreRefundPolicyRoute
  TermsOfUseRoute: typeof TermsOfUseRoute
  WishlistRoute: typeof WishlistRoute
  FriendsAllRouteRoute: typeof FriendsAllRouteRoute
  ProfileNicknameRouteRoute: typeof ProfileNicknameRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms-of-use': {
      id: '/terms-of-use'
      path: '/terms-of-use'
      fullPath: '/terms-of-use'
      preLoaderRoute: typeof TermsOfUseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store-refund-policy': {
      id: '/store-refund-policy'
      path: '/store-refund-policy'
      fullPath: '/store-refund-policy'
      preLoaderRoute: typeof StoreRefundPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/code-access': {
      id: '/code-access'
      path: '/code-access'
      fullPath: '/code-access'
      preLoaderRoute: typeof CodeAccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/change-password': {
      id: '/change-password'
      path: '/change-password'
      fullPath: '/change-password'
      preLoaderRoute: typeof ChangePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$slug': {
      id: '/$slug'
      path: '/$slug'
      fullPath: '/$slug'
      preLoaderRoute: typeof SlugRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/$slug/': {
      id: '/$slug/'
      path: '/'
      fullPath: '/$slug/'
      preLoaderRoute: typeof SlugIndexRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/settings/wallet': {
      id: '/settings/wallet'
      path: '/wallet'
      fullPath: '/settings/wallet'
      preLoaderRoute: typeof SettingsWalletRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/password': {
      id: '/settings/password'
      path: '/password'
      fullPath: '/settings/password'
      preLoaderRoute: typeof SettingsPasswordRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/notifications': {
      id: '/settings/notifications'
      path: '/notifications'
      fullPath: '/settings/notifications'
      preLoaderRoute: typeof SettingsNotificationsRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/delete-account': {
      id: '/settings/delete-account'
      path: '/delete-account'
      fullPath: '/settings/delete-account'
      preLoaderRoute: typeof SettingsDeleteAccountRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/profile/$nickname': {
      id: '/profile/$nickname'
      path: '/profile/$nickname'
      fullPath: '/profile/$nickname'
      preLoaderRoute: typeof ProfileNicknameRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/friends/all': {
      id: '/friends/all'
      path: '/friends/all'
      fullPath: '/friends/all'
      preLoaderRoute: typeof FriendsAllRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$slug/dlc': {
      id: '/$slug/dlc'
      path: '/dlc'
      fullPath: '/$slug/dlc'
      preLoaderRoute: typeof SlugDlcRouteRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/$slug/community': {
      id: '/$slug/community'
      path: '/community'
      fullPath: '/$slug/community'
      preLoaderRoute: typeof SlugCommunityRouteRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/$slug/characteristics': {
      id: '/$slug/characteristics'
      path: '/characteristics'
      fullPath: '/$slug/characteristics'
      preLoaderRoute: typeof SlugCharacteristicsRouteRouteImport
      parentRoute: typeof SlugRouteRoute
    }
    '/profile/$nickname/': {
      id: '/profile/$nickname/'
      path: '/'
      fullPath: '/profile/$nickname/'
      preLoaderRoute: typeof ProfileNicknameIndexRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/wishlist': {
      id: '/profile/$nickname/wishlist'
      path: '/wishlist'
      fullPath: '/profile/$nickname/wishlist'
      preLoaderRoute: typeof ProfileNicknameWishlistRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/videos': {
      id: '/profile/$nickname/videos'
      path: '/videos'
      fullPath: '/profile/$nickname/videos'
      preLoaderRoute: typeof ProfileNicknameVideosRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/screenshots': {
      id: '/profile/$nickname/screenshots'
      path: '/screenshots'
      fullPath: '/profile/$nickname/screenshots'
      preLoaderRoute: typeof ProfileNicknameScreenshotsRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/reviews': {
      id: '/profile/$nickname/reviews'
      path: '/reviews'
      fullPath: '/profile/$nickname/reviews'
      preLoaderRoute: typeof ProfileNicknameReviewsRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/guides': {
      id: '/profile/$nickname/guides'
      path: '/guides'
      fullPath: '/profile/$nickname/guides'
      preLoaderRoute: typeof ProfileNicknameGuidesRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/games': {
      id: '/profile/$nickname/games'
      path: '/games'
      fullPath: '/profile/$nickname/games'
      preLoaderRoute: typeof ProfileNicknameGamesRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/friends': {
      id: '/profile/$nickname/friends'
      path: '/friends'
      fullPath: '/profile/$nickname/friends'
      preLoaderRoute: typeof ProfileNicknameFriendsRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/discussions': {
      id: '/profile/$nickname/discussions'
      path: '/discussions'
      fullPath: '/profile/$nickname/discussions'
      preLoaderRoute: typeof ProfileNicknameDiscussionsRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/profile/$nickname/badges': {
      id: '/profile/$nickname/badges'
      path: '/badges'
      fullPath: '/profile/$nickname/badges'
      preLoaderRoute: typeof ProfileNicknameBadgesRouteRouteImport
      parentRoute: typeof ProfileNicknameRouteRoute
    }
    '/community/post/$id': {
      id: '/community/post/$id'
      path: '/post/$id'
      fullPath: '/community/post/$id'
      preLoaderRoute: typeof CommunityPostIdRouteRouteImport
      parentRoute: typeof CommunityRouteRoute
    }
    '/$slug/community/createPost': {
      id: '/$slug/community/createPost'
      path: '/createPost'
      fullPath: '/$slug/community/createPost'
      preLoaderRoute: typeof SlugCommunityCreatePostRouteRouteImport
      parentRoute: typeof SlugCommunityRouteRoute
    }
    '/$slug/community/post/$id': {
      id: '/$slug/community/post/$id'
      path: '/post/$id'
      fullPath: '/$slug/community/post/$id'
      preLoaderRoute: typeof SlugCommunityPostIdRouteRouteImport
      parentRoute: typeof SlugCommunityRouteRoute
    }
    '/$slug/community/currentPost/$id': {
      id: '/$slug/community/currentPost/$id'
      path: '/currentPost/$id'
      fullPath: '/$slug/community/currentPost/$id'
      preLoaderRoute: typeof SlugCommunityCurrentPostIdRouteRouteImport
      parentRoute: typeof SlugCommunityRouteRoute
    }
  }
}

interface SlugCommunityRouteRouteChildren {
  SlugCommunityCreatePostRouteRoute: typeof SlugCommunityCreatePostRouteRoute
  SlugCommunityCurrentPostIdRouteRoute: typeof SlugCommunityCurrentPostIdRouteRoute
  SlugCommunityPostIdRouteRoute: typeof SlugCommunityPostIdRouteRoute
}

const SlugCommunityRouteRouteChildren: SlugCommunityRouteRouteChildren = {
  SlugCommunityCreatePostRouteRoute: SlugCommunityCreatePostRouteRoute,
  SlugCommunityCurrentPostIdRouteRoute: SlugCommunityCurrentPostIdRouteRoute,
  SlugCommunityPostIdRouteRoute: SlugCommunityPostIdRouteRoute,
}

const SlugCommunityRouteRouteWithChildren =
  SlugCommunityRouteRoute._addFileChildren(SlugCommunityRouteRouteChildren)

interface SlugRouteRouteChildren {
  SlugCharacteristicsRouteRoute: typeof SlugCharacteristicsRouteRoute
  SlugCommunityRouteRoute: typeof SlugCommunityRouteRouteWithChildren
  SlugDlcRouteRoute: typeof SlugDlcRouteRoute
  SlugIndexRoute: typeof SlugIndexRoute
}

const SlugRouteRouteChildren: SlugRouteRouteChildren = {
  SlugCharacteristicsRouteRoute: SlugCharacteristicsRouteRoute,
  SlugCommunityRouteRoute: SlugCommunityRouteRouteWithChildren,
  SlugDlcRouteRoute: SlugDlcRouteRoute,
  SlugIndexRoute: SlugIndexRoute,
}

const SlugRouteRouteWithChildren = SlugRouteRoute._addFileChildren(
  SlugRouteRouteChildren,
)

interface CommunityRouteRouteChildren {
  CommunityPostIdRouteRoute: typeof CommunityPostIdRouteRoute
}

const CommunityRouteRouteChildren: CommunityRouteRouteChildren = {
  CommunityPostIdRouteRoute: CommunityPostIdRouteRoute,
}

const CommunityRouteRouteWithChildren = CommunityRouteRoute._addFileChildren(
  CommunityRouteRouteChildren,
)

interface SettingsRouteRouteChildren {
  SettingsDeleteAccountRoute: typeof SettingsDeleteAccountRoute
  SettingsNotificationsRoute: typeof SettingsNotificationsRoute
  SettingsPasswordRoute: typeof SettingsPasswordRoute
  SettingsWalletRoute: typeof SettingsWalletRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsDeleteAccountRoute: SettingsDeleteAccountRoute,
  SettingsNotificationsRoute: SettingsNotificationsRoute,
  SettingsPasswordRoute: SettingsPasswordRoute,
  SettingsWalletRoute: SettingsWalletRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

interface ProfileNicknameRouteRouteChildren {
  ProfileNicknameBadgesRouteRoute: typeof ProfileNicknameBadgesRouteRoute
  ProfileNicknameDiscussionsRouteRoute: typeof ProfileNicknameDiscussionsRouteRoute
  ProfileNicknameFriendsRouteRoute: typeof ProfileNicknameFriendsRouteRoute
  ProfileNicknameGamesRouteRoute: typeof ProfileNicknameGamesRouteRoute
  ProfileNicknameGuidesRouteRoute: typeof ProfileNicknameGuidesRouteRoute
  ProfileNicknameReviewsRouteRoute: typeof ProfileNicknameReviewsRouteRoute
  ProfileNicknameScreenshotsRouteRoute: typeof ProfileNicknameScreenshotsRouteRoute
  ProfileNicknameVideosRouteRoute: typeof ProfileNicknameVideosRouteRoute
  ProfileNicknameWishlistRouteRoute: typeof ProfileNicknameWishlistRouteRoute
  ProfileNicknameIndexRoute: typeof ProfileNicknameIndexRoute
}

const ProfileNicknameRouteRouteChildren: ProfileNicknameRouteRouteChildren = {
  ProfileNicknameBadgesRouteRoute: ProfileNicknameBadgesRouteRoute,
  ProfileNicknameDiscussionsRouteRoute: ProfileNicknameDiscussionsRouteRoute,
  ProfileNicknameFriendsRouteRoute: ProfileNicknameFriendsRouteRoute,
  ProfileNicknameGamesRouteRoute: ProfileNicknameGamesRouteRoute,
  ProfileNicknameGuidesRouteRoute: ProfileNicknameGuidesRouteRoute,
  ProfileNicknameReviewsRouteRoute: ProfileNicknameReviewsRouteRoute,
  ProfileNicknameScreenshotsRouteRoute: ProfileNicknameScreenshotsRouteRoute,
  ProfileNicknameVideosRouteRoute: ProfileNicknameVideosRouteRoute,
  ProfileNicknameWishlistRouteRoute: ProfileNicknameWishlistRouteRoute,
  ProfileNicknameIndexRoute: ProfileNicknameIndexRoute,
}

const ProfileNicknameRouteRouteWithChildren =
  ProfileNicknameRouteRoute._addFileChildren(ProfileNicknameRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SlugRouteRoute: SlugRouteRouteWithChildren,
  CommunityRouteRoute: CommunityRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  CartRoute: CartRoute,
  CatalogRoute: CatalogRoute,
  ChangePasswordRoute: ChangePasswordRoute,
  ChatRoute: ChatRoute,
  CodeAccessRoute: CodeAccessRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LibraryRoute: LibraryRoute,
  LoginRoute: LoginRoute,
  NewRoute: NewRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  SignUpRoute: SignUpRoute,
  StoreRefundPolicyRoute: StoreRefundPolicyRoute,
  TermsOfUseRoute: TermsOfUseRoute,
  WishlistRoute: WishlistRoute,
  FriendsAllRouteRoute: FriendsAllRouteRoute,
  ProfileNicknameRouteRoute: ProfileNicknameRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
